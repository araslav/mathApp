package math.app.dao;

import java.util.List;
import math.app.exepcion.DataProcessingException;
import math.app.model.MathEquation;
import math.app.model.Root;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import static math.app.util.HibernateUtil.getSessionFactory;

class MathEquationDaoImplTest {
    private static MathEquationDao equationDao;
    private static RootDao rootDao;

    @BeforeAll
    public static void before() {
        equationDao = new MathEquationDaoImpl(getSessionFactory());
        rootDao = new RootDaoImpl(getSessionFactory());
    }

    @Test
    void save_Ok() {
        MathEquation mathEquation = new MathEquation();
        mathEquation.setEquation("2*x+5=17");
        MathEquation actual = equationDao.save(mathEquation);
        Assertions.assertNotNull(actual, "Object didn't create!");
        Assertions.assertNotNull(actual.getId(), "ID for object should be autogenerated!");
    }

    @Test
    void saveNullEquation_Not_Ok() {
        MathEquation mathEquation = new MathEquation();
        Assertions.assertThrows(DataProcessingException.class,
                () -> equationDao.save(mathEquation));
    }

    @Test
    void saveNotUniq_Not_Ok() {
        MathEquation mathEquation1 = new MathEquation("3*(x+5)=22");
        equationDao.save(mathEquation1);
        MathEquation mathEquation2 = new MathEquation("3*(x+5)=22");
        Assertions.assertThrows(DataProcessingException.class,
                () -> equationDao.save(mathEquation2));
    }

    @Test
    void saveCascade_Ok() {
        MathEquation mathEquation = new MathEquation("4*(x+5)=22");
        Root root = new Root(5d);
        mathEquation.setRoot(List.of(root));
        MathEquation actual = equationDao.save(mathEquation);
        Assertions.assertNotNull(actual, "Object didn't create!");
        Assertions.assertNotNull(actual.getId(), "ID for object should be autogenerated!");
    }

    @Test
    void update_cascade_ok() {
        MathEquation mathEquation = new MathEquation();

        mathEquation.setEquation("5*(x+5)=22");
        equationDao.save(mathEquation);

        Root root = new Root();
        root.setRoot(6d);
        mathEquation.setRoot(List.of(root));
        MathEquation actual = equationDao.update(mathEquation);
        Assertions.assertNotNull(actual, "Object didn't create!");
        Assertions.assertNotNull(actual.getId(), "ID for object should be autogenerated!");
    }

    @Test
    void findByEquation_Ok() {
        MathEquation mathEquation1 = new MathEquation("7*(x+5)=22");
        MathEquation mathEquation2 = new MathEquation("8*(x+6)=22");
        MathEquation mathEquation3 = new MathEquation("9*(x+7)=22");
        List<MathEquation> mathEquationList = List.of(mathEquation1, mathEquation2, mathEquation3);
        mathEquationList.forEach(m -> equationDao.save(m));

        MathEquation mathEquation = equationDao.findByEquation("8*(x+6)=22").get();
        Assertions.assertEquals("8*(x+6)=22", mathEquation.getEquation());
    }

    @Test
    void findAllWhereRootCountEqualsOne_Ok() {
        MathEquation mathEquation1 = new MathEquation("2*(x+5)=22");
        mathEquation1.setRoot(List.of(new Root(1d), new Root(2d), new Root(3d)));

        MathEquation mathEquation2 = new MathEquation("2*x+5=22");
        mathEquation2.setRoot(List.of(new Root(1d)));

        MathEquation mathEquation3 = new MathEquation("2*(x+7)=22");
        mathEquation3.setRoot(List.of(new Root(1d), new Root(2d), new Root(3d)));

        List<MathEquation> mathEquationList = List.of(mathEquation1, mathEquation2, mathEquation3);
        mathEquationList.forEach(m -> equationDao.save(m));

        List<MathEquation> allWhereRootCountEqualsOne = equationDao.findAllWhereRootCountEqualsOne();
        Assertions.assertEquals(allWhereRootCountEqualsOne.size(), 4);
    }

    @Test
    void findByRoot_Ok() {
        MathEquation mathEquation1 = new MathEquation("-1.3*5/x=1.2");
        MathEquation mathEquation2 = new MathEquation("-1.3*6/x=1.2");
        MathEquation mathEquation3 = new MathEquation("-1.3*7/x=1.2");

        Root root1 = new Root(20d);
        Root root2 = new Root(21d);

        List<Root> rootList = List.of(root1, root2);
        rootList.forEach(m -> rootDao.save(m));
        List<MathEquation> mathEquationList = List.of(mathEquation1, mathEquation2, mathEquation3);
        mathEquationList.forEach(m -> equationDao.save(m));

        mathEquation1.setRoot(List.of(root1));
        equationDao.update(mathEquation1);
        mathEquation2.setRoot(List.of(root2));
        equationDao.update(mathEquation2);
        mathEquation3.setRoot(List.of(root1));
        equationDao.update(mathEquation3);

        List<MathEquation> mathEquationListResponse = equationDao.findByRoot(20d);

        Assertions.assertEquals(mathEquationListResponse.size(), 2);
    }
}